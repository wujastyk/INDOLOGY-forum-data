From ralphbunker at msn.com  Tue Dec  3 15:36:19 1996
From: ralphbunker at msn.com (Ralph Bunker)
Date: Tue, 03 Dec 96 15:36:19 +0000
Subject: World Sanskrit Conference computing workshops
Message-ID: <161227027253.23782.7748961655376564686.generated@prod2.harmonylists.io>

>I have arranged with the organisers of the World Sanskrit Conference
>(Bangalore 1997, January 3--9) to hold two special-interest workshops
>under the rubric of "Sanskrit and Computing".  Time and space has been
>allocated for these meetings. 

>The two workshops are:

> 1. On the Computer Sanskrit Extended character encoding: retrospect and
>   future development.
  
>2. On standards for the transliteration of Devanagari text using only
>   ASCII characters. 

Consider two Sanskritists S1 and S2 who want to exchange files. S1 uses a 
Macintosh, hates transliteration and prefers to only see Devanagari. S2 is a 
PC user and prefers transliteration. Would it be possible to write a computer 
program which lets them type sanskrit texts the way they want to AND to read 
and edit each others files the way they want to. Such a program should have at 
least following features:
1. It is available as shareware for a nominal fee (10 US dollars).
2. It is available on Intel, Macintosh and Unix platforms.
3. The user can train it to recognize any typing convention.  By typing 
convention I mean the actual keystrokes that are used to produce the text on 
the screen. So long a in one typing convention might be 'A' and in another 
'aa'.
4. The user can train it to convert keystrokes into displayed transliteration 
text using any transliteration font (i.e., one that supports diacritical 
marks.)
5. The user can train it to convert keystrokes into any devanagari font and 
display the keystrokes in that font.
6. The program supports virtual devanagari fonts, i.e., those made up of more 
than one 256 character font. So it would be possible to have a virtual 
devanagari font of over 1000 characters which would give you all the ligatures 
for conjunct consonents that you could desire.
7.The program could open a file created in any format that it understands and 
then display that file in the style that the user has requested.
8. The program can save a file in any format that it understands.
9. All knowledge that the program uses to understand keystrokes, read files, 
save files and display files is stored externally in tables that can be 
created using an ASCII text editor. When the program is run, it first checks 
what tables are available and initializes itself using the information 
contained therein.

Using such a program S1 and S2 could communicate as follows. S1 creates the 
tables (or uses already created ones available on the Web) that instruct the 
program behave the way that S1 wants it to behave. S1 types a text (which is 
displayed as devanagari) and saves it. S1 then sends the text along with the 
necessary tables to S2 who copies the tables to the appropriate directory (if 
they are not already there) and opens S1's file. The file will be displayed in 
S2's transliteration font (not in S1's devanagari font) and S2 can use his 
keystrokes to edit the file. He can then save the file and send it back to S2 
who will view it in devanagari and use his typing convention to edit it.

Would such a program obviate the need for the sorts of standards that will be 
discussed in the above mentioned workshops? 

Such a program would be far less complex than the software that, say, lets two 
computers communicate on a network and it would probably take less time to 
design, write and debug such a program than it would take to get the world's 
Sanskritists to agree on conventions.

With luck a demo version of such a program will be available in time for the 
World Sanskrit Conference.






